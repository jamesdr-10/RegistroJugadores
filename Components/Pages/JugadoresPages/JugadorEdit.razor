@page "/Jugador/Edit/{JugadorId:int}"

@inject JugadoresService jugadoresService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer

<PageTitle>Editar Jugador</PageTitle>
<EditForm Model="Jugador" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h5 class="card-title text-center">Editar Jugador</h5>
            </div>

            <div class="card-body">

                <div class="mb-3">
                    <label class="form-label"><strong>JugadorId</strong></label>
                    <InputNumber class="form-control" @bind-Value="Jugador.JugadorId" readonly></InputNumber>
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Nombres</strong></label>
                    <InputText class="form-control" @bind-Value="Jugador.Nombres"></InputText>
                    <ValidationMessage For="(() => Jugador.Nombres)" />
                </div>

                @if (!string.IsNullOrEmpty(errorMensaje))
                {
                    <div class="alert alert-danger">@errorMensaje</div>
                }
            </div>

            <div class="card-footer text-center">
                <a href="/Jugador/Index" class="btn btn-secondary"><span class="bi bi-arrow-left"></span> Volver</a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar</button>
                <button type="button" class="btn btn-danger bi bi-trash" @onclick="Eliminar"> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int JugadorId { get; set; }

    public Jugadores Jugador { get; set; } = new Jugadores();
    private string errorMensaje = null!;

    protected override async Task OnInitializedAsync()
    {
        if (JugadorId > 0)
        {
            Jugador = await jugadoresService.Buscar(JugadorId) ?? new Jugadores();
        }
    }

    public async Task Guardar()
    {
        if (await jugadoresService.Guardar(Jugador))
        {
            navigationManager.NavigateTo("/Jugador/Index");
        } else
        {
            errorMensaje = "⚠️ Ya existe un usuario con este nombre.";
        }
    }

    private async Task Eliminar()
    {
        if (await jugadoresService.Eliminar(Jugador.JugadorId))
        {
            navigationManager.NavigateTo("/Jugador/Index");
        } else
        {
            errorMensaje = "⚠️ No se pudo eliminar el jugador.";
        }
    }
}